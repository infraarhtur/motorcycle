import * as i0 from '@angular/core';
import { InjectionToken, Injectable, NgZone, Inject, Directive, PLATFORM_ID, Input, Output, ElementRef, Self, Component, ChangeDetectionStrategy, ViewChild, NgModule } from '@angular/core';
import { isPlatformBrowser, CommonModule } from '@angular/common';
import { from, of, animationFrameScheduler, Subject, BehaviorSubject, defer, Observable } from 'rxjs';
import { map, publishReplay, refCount, observeOn, filter, switchMap, takeUntil } from 'rxjs/operators';
import * as i1 from '@angular/platform-browser';
import { makeStateKey, TransferState } from '@angular/platform-browser';

const LOTTIE_OPTIONS = new InjectionToken('LottieOptions');

function streamifyPlayerOrLoader(player) {
    const playerOrLoader = player();
    if (playerOrLoader instanceof Promise) {
        return from(playerOrLoader).pipe(map(module => module.default || module), publishReplay(1), refCount());
    }
    else {
        return of(playerOrLoader);
    }
}
class AnimationLoader {
    constructor(ngZone, options) {
        this.ngZone = ngZone;
        this.options = options;
        this.player$ = streamifyPlayerOrLoader(this.options.player).pipe(observeOn(animationFrameScheduler));
    }
    loadAnimation(options) {
        return this.player$.pipe(map(player => this.createAnimationItem(player, options)));
    }
    resolveOptions(options, container) {
        return Object.assign({
            container,
            renderer: 'svg',
            loop: true,
            autoplay: true,
        }, options);
    }
    createAnimationItem(player, options) {
        return this.ngZone.runOutsideAngular(() => player.loadAnimation(options));
    }
}
AnimationLoader.decorators = [
    { type: Injectable }
];
/** @nocollapse */
AnimationLoader.ctorParameters = () => [
    { type: NgZone },
    { type: undefined, decorators: [{ type: Inject, args: [LOTTIE_OPTIONS,] }] }
];

class BaseDirective {
    constructor(ngZone, platformId, animationLoader) {
        this.ngZone = ngZone;
        this.platformId = platformId;
        this.animationLoader = animationLoader;
        this.options = null;
        this.containerClass = null;
        this.styles = null;
        /**
         * `animationCreated` is dispatched after calling `loadAnimation`.
         */
        this.animationCreated = this.getAnimationItem();
        /**
         * `complete` is dispatched after completing the last frame.
         */
        this.complete = this.awaitAnimationItemAndStartListening('complete');
        /**
         * `loopComplete` is dispatched after completing the frame loop.
         */
        this.loopComplete = this.awaitAnimationItemAndStartListening('loopComplete');
        /**
         * `enterFrame` is dispatched after entering the new frame.
         */
        this.enterFrame = this.awaitAnimationItemAndStartListening('enterFrame');
        /**
         * `segmentStart` is dispatched when the new segment is adjusted.
         */
        this.segmentStart = this.awaitAnimationItemAndStartListening('segmentStart');
        /**
         * Original event name is `config_ready`. `config_ready` is dispatched
         * after the needed renderer is configured.
         */
        this.configReady = this.awaitAnimationItemAndStartListening('config_ready');
        /**
         * Original event name is `data_ready`. `data_ready` is dispatched
         * when all parts of the animation have been loaded.
         */
        this.dataReady = this.awaitAnimationItemAndStartListening('data_ready');
        /**
         * Original event name is `DOMLoaded`. `DOMLoaded` is dispatched
         * when elements have been added to the DOM.
         */
        this.domLoaded = this.awaitAnimationItemAndStartListening('DOMLoaded');
        /**
         * `destroy` will be dispatched when the component gets destroyed,
         * it's handy for releasing resources.
         */
        this.destroy = this.awaitAnimationItemAndStartListening('destroy');
        /**
         * `error` will be dispatched if the Lottie player could not render
         * some frame or parse config.
         */
        this.error = this.awaitAnimationItemAndStartListening('error');
        this.destroy$ = new Subject();
        this.loadAnimation$ = new Subject();
        this.animationItem$ = new BehaviorSubject(null);
        this.setupLoadAnimationListener();
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroyAnimation();
    }
    loadAnimation(changes, container) {
        this.loadAnimation$.next([changes, container]);
    }
    getAnimationItem() {
        return defer(() => this.animationItem$).pipe(filter((animationItem) => animationItem !== null));
    }
    awaitAnimationItemAndStartListening(name) {
        return this.getAnimationItem().pipe(switchMap(animationItem => 
        // `fromEvent` will try to call `removeEventListener` when `unsubscribe()` is invoked.
        // The problem is that `ngOnDestroy()` is called before Angular unsubscribes from
        // `@Output()` properties, thus `animationItem` will be `null` already, also `lottie-web`
        // removes event listeners when calling `destroy()`.
        new Observable(observer => {
            animationItem.addEventListener(name, event => {
                this.ngZone.runOutsideAngular(() => {
                    observer.next(event);
                });
            });
        })));
    }
    setupLoadAnimationListener() {
        this.loadAnimation$
            .pipe(filter(([changes]) => isPlatformBrowser(this.platformId) && changes.options !== undefined), switchMap(([changes, container]) => {
            this.destroyAnimation();
            return this.animationLoader.loadAnimation(this.animationLoader.resolveOptions(changes.options.currentValue, container));
        }), takeUntil(this.destroy$))
            .subscribe(animationItem => {
            this.animationItem$.next(animationItem);
        });
    }
    destroyAnimation() {
        const animationItem = this.animationItem$.getValue();
        // The `ng-lottie` component or the `lottie` directive can be destroyed
        // before the `animationItem` is set, thus it will fail with
        // `Cannot read property 'destroy' of null`.
        // Potentially it can happen if the directive gets destroyed before change
        // detection is run.
        if (animationItem === null) {
            return;
        }
        // `destroy()` will remove all events listeners.
        animationItem.destroy();
        this.animationItem$.next(null);
    }
}
BaseDirective.decorators = [
    { type: Directive, args: [{ selector: '[lottie]' },] }
];
/** @nocollapse */
BaseDirective.ctorParameters = () => [
    { type: NgZone },
    { type: String, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: AnimationLoader }
];
BaseDirective.propDecorators = {
    options: [{ type: Input }],
    containerClass: [{ type: Input }],
    styles: [{ type: Input }],
    animationCreated: [{ type: Output }],
    complete: [{ type: Output }],
    loopComplete: [{ type: Output }],
    enterFrame: [{ type: Output }],
    segmentStart: [{ type: Output }],
    configReady: [{ type: Output }],
    dataReady: [{ type: Output }],
    domLoaded: [{ type: Output }],
    destroy: [{ type: Output }],
    error: [{ type: Output }]
};

class LottieDirective extends BaseDirective {
    constructor(ngZone, platformId, host, animationLoader) {
        super(ngZone, platformId, animationLoader);
        this.host = host;
    }
    ngOnChanges(changes) {
        super.loadAnimation(changes, this.host.nativeElement);
    }
}
LottieDirective.decorators = [
    { type: Directive, args: [{ selector: '[lottie]' },] }
];
/** @nocollapse */
LottieDirective.ctorParameters = () => [
    { type: NgZone },
    { type: String, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: ElementRef, decorators: [{ type: Self }] },
    { type: AnimationLoader }
];

class LottieComponent extends BaseDirective {
    constructor(ngZone, platformId, animationLoader) {
        super(ngZone, platformId, animationLoader);
        this.width = null;
        this.height = null;
        this.container = null;
    }
    ngOnChanges(changes) {
        super.loadAnimation(changes, this.container.nativeElement);
    }
}
LottieComponent.decorators = [
    { type: Component, args: [{
                selector: 'ng-lottie',
                template: `
    <div
      #container
      [style.width]="width || '100%'"
      [style.height]="height || '100%'"
      [ngStyle]="styles"
      [ngClass]="containerClass"
    ></div>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
/** @nocollapse */
LottieComponent.ctorParameters = () => [
    { type: NgZone },
    { type: String, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: AnimationLoader }
];
LottieComponent.propDecorators = {
    width: [{ type: Input }],
    height: [{ type: Input }],
    container: [{ type: ViewChild, args: ['container', { static: true },] }]
};

class LottieModule {
    static forRoot(options) {
        return {
            ngModule: LottieModule,
            providers: [
                AnimationLoader,
                {
                    provide: LOTTIE_OPTIONS,
                    useValue: options,
                },
            ],
        };
    }
}
LottieModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [BaseDirective, LottieDirective, LottieComponent],
                exports: [BaseDirective, LottieDirective, LottieComponent],
            },] }
];

class CacheableAnimationLoader extends AnimationLoader {
    constructor() {
        super(...arguments);
        this.cache = new Map();
    }
    loadAnimation(options) {
        return this.player$.pipe(map(player => {
            const animationItem = this.createAnimationItem(player, this.transformOptions(options));
            this.awaitConfigAndCache(options, animationItem);
            return animationItem;
        }));
    }
    awaitConfigAndCache(options, animationItem) {
        if (this.isAnimationConfigWithPath(options)) {
            // Don't wait for the `config_ready` event if it has been cached previously.
            if (this.cache.has(options.path)) {
                return;
            }
            animationItem.addEventListener('config_ready', () => {
                this.cache.set(options.path, animationItem['animationData']);
            });
        }
    }
    transformOptions(options) {
        if (this.isAnimationConfigWithPath(options) && this.cache.has(options.path)) {
            return Object.assign(Object.assign({}, options), { path: undefined, animationData: this.cache.get(options.path) });
        }
        else {
            return options;
        }
    }
    isAnimationConfigWithPath(options) {
        return typeof options.path === 'string';
    }
}
CacheableAnimationLoader.decorators = [
    { type: Injectable }
];

class LottieCacheModule {
    static forRoot() {
        return {
            ngModule: LottieCacheModule,
            providers: [
                {
                    provide: AnimationLoader,
                    useClass: CacheableAnimationLoader,
                },
            ],
        };
    }
}
LottieCacheModule.decorators = [
    { type: NgModule }
];

function transformAnimationFilenameToKey(animation) {
    const [animationName] = animation.split('.json');
    return `animation-${animationName}`;
}

class LottieTransferState {
    constructor(transferState) {
        this.transferState = transferState;
    }
    get(animation) {
        const animationKey = transformAnimationFilenameToKey(animation);
        const stateKey = makeStateKey(animationKey);
        return this.transferState.get(stateKey, null);
    }
}
/** @nocollapse */ LottieTransferState.ɵprov = i0.ɵɵdefineInjectable({ factory: function LottieTransferState_Factory() { return new LottieTransferState(i0.ɵɵinject(i1.TransferState)); }, token: LottieTransferState, providedIn: "root" });
LottieTransferState.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */
LottieTransferState.ctorParameters = () => [
    { type: TransferState }
];

/**
 * The public api for consumers of ngx-lottie
 */

/**
 * Generated bundle index. Do not edit.
 */

export { BaseDirective, LottieCacheModule, LottieComponent, LottieDirective, LottieModule, LottieTransferState, transformAnimationFilenameToKey, LOTTIE_OPTIONS as ɵb, AnimationLoader as ɵc, CacheableAnimationLoader as ɵd };
//# sourceMappingURL=ngx-lottie.js.map
