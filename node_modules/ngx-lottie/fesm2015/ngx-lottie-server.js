import { InjectionToken, APP_INITIALIZER, NgModule } from '@angular/core';
import { makeStateKey, TransferState } from '@angular/platform-browser';
import { join } from 'path';
import { transformAnimationFilenameToKey } from 'ngx-lottie';
import { readFile } from 'fs';

function readFileWithAnimationData(path) {
    return new Promise((resolve, reject) => {
        readFile(path, (error, data) => {
            if (error) {
                return reject(error);
            }
            resolve(data.toString());
        });
    });
}

function readAndTransferAnimationData(transferState, animations, pathsToAnimations) {
    const sources = [];
    for (let i = 0, length = animations.length; i < length; i++) {
        const path = pathsToAnimations[i];
        const source = readFileWithAnimationData(path).then(animationData => {
            transferAnimationData(transferState, animations[i], animationData);
        });
        sources.push(source);
    }
    return sources;
}
function transferAnimationData(state, animation, animationData) {
    animation = transformAnimationFilenameToKey(animation);
    const key = makeStateKey(animation);
    state.set(key, JSON.parse(animationData));
}
function appInitializerFactory(options, state) {
    const pathsToAnimations = resolveLottiePaths(options);
    const sources = readAndTransferAnimationData(state, options.preloadAnimations.animations, pathsToAnimations);
    return () => Promise.all(sources);
}
function resolveLottiePaths({ preloadAnimations }) {
    const { folder, animations } = preloadAnimations;
    const path = join(process.cwd(), folder);
    return animations.map(animation => join(path, animation));
}

const LOTTIE_SERVER_OPTIONS = new InjectionToken('LottieServerOptions');
class LottieServerModule {
    static forRoot(options) {
        return {
            ngModule: LottieServerModule,
            providers: [
                {
                    provide: LOTTIE_SERVER_OPTIONS,
                    useValue: options,
                },
                {
                    provide: APP_INITIALIZER,
                    useFactory: appInitializerFactory,
                    multi: true,
                    deps: [LOTTIE_SERVER_OPTIONS, TransferState],
                },
            ],
        };
    }
}
LottieServerModule.decorators = [
    { type: NgModule }
];

/**
 * Generated bundle index. Do not edit.
 */

export { LottieServerModule, LOTTIE_SERVER_OPTIONS as ɵa, appInitializerFactory as ɵb };
//# sourceMappingURL=ngx-lottie-server.js.map
